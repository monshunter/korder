# Manual test for DaemonSet mode functionality
# This file contains test cases to manually verify DaemonSet mode works correctly

---
# Test 1: Basic DaemonSet order
apiVersion: core.korder.dev/v1alpha1
kind: Order
metadata:
  name: test-daemonset-basic
  namespace: default
spec:
  # Enable DaemonSet mode
  daemonSet: true
  
  strategy:
    type: OneTime
    refreshPolicy: OnClaim
  
  template:
    metadata:
      labels:
        app: test-daemonset
        tier: test
    spec:
      duration: 1h
      
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
        limits:
          cpu: 100m
          memory: 200Mi
      
      # Target all Linux nodes
      nodeSelector:
        kubernetes.io/os: linux
      
      # Tolerate common taints
      tolerations:
        - operator: Exists
          effect: NoSchedule

---
# Test 2: DaemonSet with specific node selector
apiVersion: core.korder.dev/v1alpha1
kind: Order
metadata:
  name: test-daemonset-selective
  namespace: default
spec:
  daemonSet: true
  
  strategy:
    type: Recurring
    schedule: "*/5 * * * *"  # Every 5 minutes for testing
    refreshPolicy: Always
  
  template:
    metadata:
      labels:
        app: test-selective
        tier: test
    spec:
      duration: 30m
      
      resources:
        requests:
          cpu: 25m
          memory: 50Mi
        limits:
          cpu: 50m
          memory: 100Mi
      
      # Only target worker nodes (if labeled)
      nodeSelector:
        kubernetes.io/os: linux
        node-role.kubernetes.io/worker: ""
      
      tolerations:
        - key: node-role.kubernetes.io/worker
          operator: Exists
          effect: NoSchedule

---
# Test 3: Business pod using DaemonSet reservation
apiVersion: v1
kind: Pod
metadata:
  name: test-business-pod-daemonset
  namespace: default
  annotations:
    korder.dev/required: "true"
    korder.dev/order: "test-daemonset-basic"
  labels:
    app: test-business
spec:
  containers:
  - name: test-container
    image: nginx:alpine
    resources:
      requests:
        cpu: 50m
        memory: 100Mi
      limits:
        cpu: 100m
        memory: 200Mi
    command: ["sleep", "3600"]

---
# Test commands to run:
# 
# 1. Apply the test orders:
#    kubectl apply -f test/manual/daemonset-test.yaml
#
# 2. Check that tickets are created (should be one per eligible node):
#    kubectl get tickets -l korder.dev/order=test-daemonset-basic
#    kubectl get tickets -l korder.dev/order=test-daemonset-selective
#
# 3. Check guardian pods are created on each node:
#    kubectl get pods -l korder.dev/role=guardian -o wide
#
# 4. Verify order status shows correct replica count:
#    kubectl describe order test-daemonset-basic
#    kubectl describe order test-daemonset-selective
#
# 5. Create the business pod and verify it gets bound:
#    kubectl get pod test-business-pod-daemonset -o yaml | grep korder.dev/
#
# 6. Check that the business pod is scheduled to a node with a guardian:
#    kubectl get pod test-business-pod-daemonset -o wide
#
# 7. Add a new node to the cluster and verify new tickets are created automatically
#    (This requires actually adding a node to test)
#
# 8. Clean up:
#    kubectl delete -f test/manual/daemonset-test.yaml
#    kubectl delete pod test-business-pod-daemonset
